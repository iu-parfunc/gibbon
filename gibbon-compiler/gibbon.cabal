cabal-version:         2.0

name:                  gibbon
version:               0.3
synopsis:              A compiler for operating on serialized data
description:           @<http://iu-parfunc.github.io/gibbon/ Gibbon>@
                       is an experimental compiler that transforms high-level
                       functional programs to operate on serialized data.
-- license:
-- license-file:          LICENSE
author:                Ryan Newton
maintainer:            rrnewton@gmail.com
copyright:             Copyright 2016-2022 Ryan Newton and contributors
category:              Compilers/Interpreters
extra-source-files:    README.md
build-type:            Simple
extra-source-files:    README.md
tested-with:           GHC==9.4.6
                     , GHC==9.2.8
                     , GHC==9.0.2
                     , GHC==8.10.7
                     , GHC==8.8.4
                     , GHC==9.6.5
                     , GHC==9.8.2
                     , GHC==9.10.2
                     , GHC==9.12.2

flag LLVM_ENABLED
  description:         Enable LLVM backend
  default:             False

library
  exposed-modules:     Gibbon.Common
                       Gibbon.Compiler
                       Gibbon.DynFlags
                       Gibbon.Pretty
                       Gibbon.SExpFrontend
                       Gibbon.HaskellFrontend

                       Gibbon.Language
                       Gibbon.Language.Syntax
                       Gibbon.Language.Constants

                       Gibbon.L0.Syntax
                       Gibbon.L0.Typecheck
                       Gibbon.L0.ElimNewtype
                       Gibbon.L0.Specialize2
                       Gibbon.L0.Interp
                       Gibbon.L1.Syntax
                       Gibbon.L1.Typecheck
                       Gibbon.L1.Interp
                       Gibbon.L1.Examples
                       Gibbon.L1.GenSML
                       Gibbon.L2.Syntax
                       Gibbon.L2.Typecheck
                       Gibbon.L2.Interp
                       Gibbon.L2.Examples
                       Gibbon.L3.Syntax
                       Gibbon.L3.Typecheck
                       Gibbon.L4.Syntax
                       Gibbon.L4.Interp

                       Gibbon.NewL2.Syntax
                       Gibbon.NewL2.FromOldL2

                       -- compiler passes, roughly in the order they're run
                       Gibbon.Passes.Freshen
                       Gibbon.Passes.Flatten
                       Gibbon.Passes.InlineTriv
                       Gibbon.Passes.Simplifier
                       Gibbon.Passes.DirectL3
                       Gibbon.Passes.Fusion2
                       Gibbon.Passes.AddRAN
                       Gibbon.Passes.AddTraversals
                       Gibbon.Passes.InferLocations
                       Gibbon.Passes.RegionsInwards
                       Gibbon.Passes.RemoveCopies
                       Gibbon.Passes.InferEffects
                       Gibbon.Passes.ParAlloc
                       Gibbon.Passes.InferRegionScope
                       Gibbon.Passes.RouteEnds
                       Gibbon.Passes.FollowPtrs
                       Gibbon.Passes.InferFunAllocs
                       Gibbon.Passes.ThreadRegions
                       Gibbon.Passes.ThreadRegions2
                       Gibbon.Passes.Cursorize
                       Gibbon.Passes.FindWitnesses
                       Gibbon.Passes.ShakeTree
                       Gibbon.Passes.HoistNewBuf
                       Gibbon.Passes.ReorderScalarWrites
                       Gibbon.Passes.Unariser
                       Gibbon.Passes.Lower
                       Gibbon.Passes.RearrangeFree
                       Gibbon.Passes.Codegen
                       Gibbon.Passes.CalculateBounds
                       Gibbon.Passes.CorrectLocExprs
                       Gibbon.Passes.ReorderLetExprs
                       Gibbon.Passes.AddCastInstructions

  other-extensions:    DeriveDataTypeable CPP

  build-depends:       base                     >= 4.11      &&  < 5
                     , bytestring               >= 0.10.8.1  &&  < 1
                     , text                     >= 1.2.3     &&  < 3
                     , process                  >= 1.4.3     &&  < 2
                     , filepath                 >= 1.4.1     &&  < 2
                     , directory                >= 1.3       &&  < 2
                     , containers               >= 0.5.8     &&  < 0.8
                     , deepseq                  >= 1.4.2     &&  < 1.6
                     , mtl                      >= 2.2.1     &&  < 3
                     , transformers             >= 0.5.2     &&  < 1
                     , clock                    >= 0.7.1     &&  < 1
                     , random                   >= 1.1       &&  < 1.3
                     , recursion-schemes        >= 5.1       &&  < 6
                     , vector                   >= 0.12      &&  < 0.14
                     , tuple                    >= 0.3       &&  < 1
                     -- Parsers:
                     , parsec                   >= 3         &&  < 4
                     , optparse-applicative     >= 0.13      &&  < 1
                     , haskell-src-exts         >= 1.20      &&  < 2
                     , hse-cpp                  >= 0.1       &&  < 1
                     , s-cargot                 >= 0.1.3     &&  < 1
                     , srcloc                   >= 0.6       &&  < 1
                     , intern                   ^>= 0.9
                     -- Pretty printers:
                     , pretty                   >= 1.1.1.3   &&  < 1.2
                     , GenericPretty            >= 1.2.1     &&  < 2
                     , language-c-quote         >= 0.12.1    &&  < 1
                     , mainland-pretty          >= 0.6.1     &&  < 1
                     , safe
                     , uuid
-- Brings in lots of ekmett dependencies:
--                     , either

  if flag(LLVM_ENABLED)
    -- exposed-modules:
    build-depends:     llvm-hs-pure             >= 6.2.0     &&  < 0.7
                     , llvm-hs                  >= 6.2.0     &&  < 0.7
    cpp-options:       -DLLVM_ENABLED

  hs-source-dirs:      src
  default-language:    Haskell2010
  ghc-options:         -Wall -Wcompat -Wno-orphans -Wredundant-constraints
                       -Wno-partial-type-signatures -Wno-unused-top-binds
                       -Wno-typed-holes -fdefer-typed-holes
                       -Wno-incomplete-uni-patterns
  default-extensions:  ScopedTypeVariables PatternSynonyms DeriveGeneric DeriveFunctor
                       NamedFieldPuns TupleSections TypeFamilies
                       PartialTypeSignatures OverloadedStrings
                       -- This can break things: DeriveAnyClass
  other-extensions:    DeriveDataTypeable CPP

executable gibbon
  hs-source-dirs:      app
  main-is:             Frontend.hs

  build-depends:       base
                     , haskell-src-exts
                     , filepath
                     , gibbon

  default-language:    Haskell2010
  ghc-options:         -Wall -rtsopts -fdefer-typed-holes
  default-extensions:  TypeFamilies


test-suite test-gibbon
  type:                exitcode-stdio-1.0
  hs-source-dirs:      tests
  main-is:             Main.hs

  build-depends:       base,
                       gibbon, containers,
                       filepath, directory, process,
                       srcloc, pretty, time,
                       mtl, transformers,
                       tasty, tasty-hunit, tasty-th,
                       text, bytestring
  other-modules:       RouteEnds
                       InferEffects
                       InferLocations
                       Unariser
                       InferRegionScope
                       AddRAN
                       L1.Typecheck
                       L1.Interp
                       L2.Typecheck
                       L2.Interp
                       -- L0.Specialize
  default-language:    Haskell2010
  ghc-options:         -fdefer-typed-holes
  default-extensions:  OverloadedStrings NamedFieldPuns


executable test-gibbon-examples
  hs-source-dirs:      tests
  main-is:             BenchRunner.hs
  build-depends:       gibbon,
                       base, containers, mtl, transformers,
                       process, filepath, directory,
                       time, clock, text, bytestring,
                       yaml, optparse-applicative, scientific,
                       prettyprinter, prettyprinter-ansi-terminal

  default-language:    Haskell2010
  other-modules:       TestRunner
  ghc-options:         -Wall -rtsopts -fdefer-typed-holes
                       -main-is BenchRunner
  default-extensions:  OverloadedStrings NamedFieldPuns
